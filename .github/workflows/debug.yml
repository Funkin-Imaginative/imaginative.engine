name: Debug Builds

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

  workflow_dispatch:

jobs:

  windows:
    permissions: write-all
    runs-on: windows-latest

    steps:
      - name: Checking Latest Commit
        uses: actions/checkout@main
        with:
          submodules: true

      - name: Setup Haxe
        uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.6

      - name: Run Cache
        uses: actions/cache@v3
        with:
          # not caching the bin folder to prevent asset duplication and stuff like that
          key: windows-debug-cache
          path: |
            .haxelib/
            export/debug/windows/haxe/
            export/debug/windows/obj/
          restore-keys: windows-debug-cache

      - name: Install Libraries
        run: haxe -cp setup -D analyzer-optimize --run Main --always

      - name: Compile Engine
        run: haxelib run lime debug windows

      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: Windows
          path: export/debug/windows/bin
          overwrite: true
          include-hidden-files: true
          if-no-files-found: error

      - name: Clearing Cache
        uses: actions/github-script@v6
        with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.key == 'windows-debug-cache') {
                console.log('Clearing ' + cache.key + '...')
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
                console.log('Cache cleared.')
              }
            }

      - name: Run New Cache
        uses: actions/cache@v3
        with:
          # not caching the bin folder to prevent asset duplication and stuff like that
          key: windows-debug-cache
          path: |
            .haxelib/
            export/debug/windows/haxe/
            export/debug/windows/obj/
          restore-keys: windows-debug-cache

  mac:
    permissions: write-all
    runs-on: macos-13

    steps:
      - name: Checking Latest Commit
        uses: actions/checkout@main
        with:
          submodules: true

      - name: Setup Haxe
        uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.6

      - name: Run Cache
        uses: actions/cache@v3
        with:
          # not caching the bin folder to prevent asset duplication and stuff like that
          key: mac-debug-cache
          path: |
            .haxelib/
            export/debug/mac/haxe/
            export/debug/mac/obj/
          restore-keys: mac-debug-cache

      - name: Installing Libs
        run: haxe -cp setup -D analyzer-optimize --run Main --always

      - name: Building the game
        run: haxelib run lime debug mac

      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: Mac
          path: export/debug/macos/bin
          overwrite: true
          include-hidden-files: true
          if-no-files-found: error

      - name: Clearing Cache
        uses: actions/github-script@v6
        with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.key == 'mac-debug-cache') {
                console.log('Clearing ' + cache.key + '...')
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
                console.log('Cache cleared.')
              }
            }

      - name: Run New Cache
        uses: actions/cache@v3
        with:
          # not caching the bin folder to prevent asset duplication and stuff like that
          key: mac-debug-cache
          path: |
            .haxelib/
            export/debug/mac/haxe/
            export/debug/mac/obj/
          restore-keys: mac-debug-cache

  linux:
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
      - name: Checking Latest Commit
        uses: actions/checkout@main
        with:
          submodules: true

      - name: Setup Haxe
        uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.6

      - name: Run Cache
        uses: actions/cache@v3
        with:
          # not caching the bin folder to prevent asset duplication and stuff like that
          key: linux-debug-cache
          path: |
            .haxelib/
            export/debug/linux/haxe/
            export/debug/linux/obj/
          restore-keys: linux-debug-cache

      - name: Installing Dependencies
        run: sudo apt-get update && sudo apt-get upgrade && sudo apt-get install libvlc-dev libvlccore-dev vlc-bin vlc

      - name: Installing Libs
        run: haxe -cp setup -D analyzer-optimize --run Main --always

      - name: Building the game
        run: haxelib run lime debug linux

      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: Linux
          path: export/debug/linux/bin
          overwrite: true
          include-hidden-files: true
          if-no-files-found: error

      - name: Clearing Cache
        uses: actions/github-script@v6
        with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.key == 'linux-debug-cache') {
                console.log('Clearing ' + cache.key + '...')
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
                console.log('Cache cleared.')
              }
            }
      - name: Run New Cache
        uses: actions/cache@v3
        with:
          # not caching the bin folder to prevent asset duplication and stuff like that
          key: linux-debug-cache
          path: |
            .haxelib/
            export/debug/linux/haxe/
            export/debug/linux/obj/
          restore-keys: linux-debug-cache